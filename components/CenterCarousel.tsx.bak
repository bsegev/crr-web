"use client"
import React, { useState, useEffect, useCallback } from "react"
import useEmblaCarousel from "embla-carousel-react"
import { motion } from "framer-motion"
import Link from "next/link"
import { ChevronLeft, ChevronRight } from "lucide-react"

const centers = [
  {
    id: 1,
    name: "Costa Rica",
    location: "Peninsula Papagayo",
    description: "Immerse yourself in tropical healing where pristine beaches meet transformative care.",
    image: "/nature-heal.jpg",
    href: "/our-centers"
  },
  {
    id: 2,
    name: "Monterey",
    location: "California Coast",
    description: "Find renewal along dramatic coastlines with world-class clinical excellence.",
    image: "/nature-mountain.jpg",
    href: "/our-centers"
  },
  {
    id: 3,
    name: "Switzerland",
    location: "Swiss Alps",
    description: "Experience alpine serenity combined with cutting-edge therapeutic approaches.",
    image: "/nature-stones.jpg",
    href: "/our-centers"
  },
  {
    id: 4,
    name: "Thailand",
    location: "Koh Samui",
    description: "Discover ancient wisdom and modern healing in a tropical paradise setting.",
    image: "/nature-group.jpg",
    href: "/our-centers"
  }
]

const CenterCarousel = () => {
  const [emblaRef, emblaApi] = useEmblaCarousel({
    loop: true,
    align: "start",
    skipSnaps: false,
    duration: 30
  })

  const [selectedIndex, setSelectedIndex] = useState(0)
  const [isAutoPlaying, setIsAutoPlaying] = useState(true)

  const scrollTo = useCallback((index: number) => {
    if (!emblaApi) return
    emblaApi.scrollTo(index)
    setIsAutoPlaying(false)
  }, [emblaApi])

  const scrollPrev = useCallback(() => {
    if (!emblaApi) return
    emblaApi.scrollPrev()
    setIsAutoPlaying(false)
  }, [emblaApi])

  const scrollNext = useCallback(() => {
    if (!emblaApi) return
    emblaApi.scrollNext()
    setIsAutoPlaying(false)
  }, [emblaApi])

  const onSelect = useCallback(() => {
    if (!emblaApi) return
    setSelectedIndex(emblaApi.selectedScrollSnap())
  }, [emblaApi])

  useEffect(() => {
    if (!emblaApi) return

    onSelect()
    emblaApi.on("select", onSelect)
    emblaApi.on("reInit", onSelect)

    return () => {
      emblaApi.off("select", onSelect)
      emblaApi.off("reInit", onSelect)
    }
  }, [emblaApi, onSelect])

  // Auto-play functionality
  useEffect(() => {
    if (!emblaApi || !isAutoPlaying) return
    
    const interval = setInterval(() => {
      emblaApi.scrollNext()
    }, 5000)
    
    return () => clearInterval(interval)
  }, [emblaApi, isAutoPlaying])

  // Resume autoplay after manual interaction
  useEffect(() => {
    if (!isAutoPlaying) {
      const timeout = setTimeout(() => {
        setIsAutoPlaying(true)
      }, 10000) // Resume after 10 seconds

      return () => clearTimeout(timeout)
    }
  }, [isAutoPlaying])

  return (
    <section className="relative h-[70vh] min-h-[600px] w-full overflow-hidden bg-black">
      {/* Background Images with smooth transitions */}
      <div className="absolute inset-0">
        {centers.map((center, index) => (
        <motion.div
            key={center.id}
          className="absolute inset-0"
            initial={false}
            animate={{
              opacity: index === selectedIndex ? 1 : 0,
              scale: index === selectedIndex ? 1.05 : 1,
            }}
            transition={{
              opacity: { duration: 1, ease: "easeInOut" },
              scale: { duration: 8, ease: "easeOut" }
            }}
        >
          <img
              src={center.image}
              alt={center.name}
            className="w-full h-full object-cover"
            style={{ filter: "brightness(0.4) contrast(1.1)" }}
          />
        </motion.div>
        ))}
      </div>

      {/* Content */}
      <div className="absolute inset-0 flex items-center z-10">
        <div className="w-full max-w-7xl mx-auto px-8 md:px-12">
          <div className="grid md:grid-cols-2 gap-12 items-center">
            
            {/* Left: Current Center Info with smooth text transitions */}
            <div className="space-y-8">
              <div className="space-y-4">
                <motion.h2 
                  key={`title-${selectedIndex}`}
                initial={{ opacity: 0, x: -30 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.8, ease: "easeOut" }}
                  className="text-5xl md:text-7xl font-light text-white leading-[1.1] tracking-[-0.02em]"
                >
                  {centers[selectedIndex].name}
                </motion.h2>
                <div className="w-16 h-px bg-[#B7C9B7]/30"></div>
                <motion.p 
                  key={`location-${selectedIndex}`}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.8, delay: 0.1, ease: "easeOut" }}
                  className="text-xl md:text-2xl font-light text-[#B7C9B7]"
                >
                  {centers[selectedIndex].location}
                </motion.p>
              </div>
              
              <motion.p 
                key={`description-${selectedIndex}`}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.8, delay: 0.2, ease: "easeOut" }}
                className="text-lg md:text-xl font-light text-white/90 max-w-lg leading-relaxed"
              >
                {centers[selectedIndex].description}
              </motion.p>
              
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.3 }}
              >
                <Link href={centers[selectedIndex].href} className="mt-8 block">
                  <button className="group relative text-white text-sm tracking-widest uppercase font-medium">
                    <span className="relative z-10 px-10 py-4 block">Explore Center</span>
                    <div className="absolute inset-0 border border-[#B7C9B7]/30 group-hover:border-[#B7C9B7]/60 transition-all duration-300"></div>
                    <div className="absolute inset-0 bg-[#B7C9B7]/5 group-hover:bg-[#B7C9B7]/10 transition-all duration-300"></div>
                  </button>
                </Link>
              </motion.div>
            </div>

            {/* Right: Center Navigation */}
            <div className="space-y-6">
              {centers.map((center, index) => (
                <motion.button
                  key={center.id}
                  onClick={() => scrollTo(index)}
                  className={`w-full text-left p-6 border-l-2 transition-all duration-300 ${
                    index === selectedIndex 
                      ? 'border-[#B7C9B7] bg-[#B7C9B7]/10 backdrop-blur-sm' 
                      : 'border-white/20 hover:border-[#B7C9B7]/40 hover:bg-[#B7C9B7]/5'
                  }`}
                  whileHover={{ x: 8 }}
                  transition={{ duration: 0.2 }}
                >
                  <h3 className={`text-xl md:text-2xl font-light mb-2 transition-colors ${
                    index === selectedIndex ? 'text-white' : 'text-white/70'
                  }`}>
                    {center.name}
                  </h3>
                  <p className={`text-sm md:text-base font-light transition-colors ${
                    index === selectedIndex ? 'text-white/80' : 'text-white/50'
                  }`}>
                    {center.location}
                  </p>
                </motion.button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Hidden Embla Carousel for infinite scroll logic */}
      <div className="absolute inset-0 pointer-events-none opacity-0" ref={emblaRef}>
        <div className="flex">
          {centers.map((center, index) => (
            <div key={center.id} className="flex-[0_0_100%] min-w-0">
              {/* Empty slides for Embla to track */}
            </div>
          ))}
        </div>
      </div>

      {/* Navigation Arrows */}
      <button
        onClick={scrollPrev}
        className="absolute left-8 top-1/2 -translate-y-1/2 z-20 w-12 h-12 border border-[#B7C9B7]/30 hover:border-[#B7C9B7]/60 hover:bg-[#B7C9B7]/10 transition-all duration-300 flex items-center justify-center group"
      >
        <ChevronLeft className="w-6 h-6 text-[#B7C9B7]/70 group-hover:text-[#B7C9B7] transition-colors" />
      </button>
      
      <button
        onClick={scrollNext}
        className="absolute right-8 top-1/2 -translate-y-1/2 z-20 w-12 h-12 border border-[#B7C9B7]/30 hover:border-[#B7C9B7]/60 hover:bg-[#B7C9B7]/10 transition-all duration-300 flex items-center justify-center group"
      >
        <ChevronRight className="w-6 h-6 text-[#B7C9B7]/70 group-hover:text-[#B7C9B7] transition-colors" />
      </button>

      {/* Progress Indicators */}
      <div className="absolute bottom-8 left-1/2 -translate-x-1/2 flex space-x-3 z-20">
        {centers.map((_, index) => (
          <button
            key={index}
            onClick={() => scrollTo(index)}
            className={`w-12 h-1 transition-all duration-300 ${
              index === selectedIndex ? 'bg-[#B7C9B7]' : 'bg-[#B7C9B7]/30 hover:bg-[#B7C9B7]/50'
            }`}
          />
        ))}
      </div>
    </section>
  )
}

export default CenterCarousel 